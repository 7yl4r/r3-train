[
["index.html", "NPS Workshop on Interactive Reporting with R 1 Overview 1.1 Google Drive Content 1.2 Resources", " NPS Workshop on Interactive Reporting with R 1 Overview This is the landing site for our workshop materials. Google Drive (folders, docs, slides, sheets, etc.) allows us to be agile with adapting content on the fly. The rest of the content in this site is generated using the techniques taught: R + markdown = Rmarkdown, git, Github, etc. 1.1 Google Drive Content workshop/ agenda notes presentations/ data/ 1.2 Resources R for Data Science Spatial Data Analysis and Modeling with R Introduction to GIS - slides "],
["collaborate-git-github.html", "2 Collaborate: git, github 2.1 Setup Github &amp; Git 2.2 Github Workflows 2.3 Create Repository nps-demo 2.4 Create index.html 2.5 Create RStudio Project with Git Repository 2.6 Create index.Rmd in Rmarkdown 2.7 Exercise: Intertidal Sites Dataset", " 2 Collaborate: git, github This section is paired with: Data Wrangling in the R Tidyverse - Google Slides The two main tools you’ll learn about to start are: Git is a version control system that lets you track changes to files over time. These files can be any kind of file (eg doc, pdf, xls), but free text differences are most easily visible (eg txt, csv, md). You can rollback changes made by you, or others. This facilitates a playground for collaboration, without fear of experimentation (you can always rollback changes). Github is a website for storing your git versioned files remotely. It has many nice features to be able visualize differences between images, rendering &amp; diffing map data files, render text data files, and track changes in text. Steps: Create Github login Create project website with Github Pages Edit README.md in Markdown Create HTML website content with R Markdown 2.1 Setup Github &amp; Git Create Github account at http://github.com, if you don’t already have one. For username, I recommend all lower-case letters, short as you can. If you use an email ending in .edu, you can request free private repositories via GitHub Education discount. Configure git with global commands. Open up the Bash version of Git and type the following: # display your version of git git --version # replace USER with your Github user account git config –-global user.name USER # replace USER@SOMEWHERE.EDU with the email you used to register with Github git config –-global user.email USER@SOMEWHERE.EDU # list your config to confirm user.* variables set git config --list 2.2 Github Workflows The two most common workflow models for working Github repositories is based on your permissions: writable: Push &amp; Pull (simplest) read only: Fork &amp; Pull Request (extra steps) We will only go over the first writable mode. For more on the second mode, see Forking Projects · GitHub Guides. 2.2.1 Push &amp; Pull repo location initialize edit update github.com/OWNER/REPO create ~/github/REPO clone commit , push pull Note that OWNER could be either an individual USER or group ORGANIZATION, which has member USERs. 2.3 Create Repository nps-demo Now you will create a Github repository for a project. Create a repository called my-project. Please be sure to tick the box to Initialize this repository with a README. Otherwise defaults are fine. Create a branch called gh-pages. Per pages.github.com, since this will be a project site only web files in the gh-pages branch will show up at http://USER.github.io/REPO. For a user (or organization) site, the REPO must be named USER.github.io (or ORG.github.io) and then the default master branch will contain the web files for the website http://USER.github.io (or http://ORG.github.io). See also User, Organization, and Project Pages - Github Help. Set the default branch to gh-pages, NOT the default master. Delete the branch master, which will not be used. 2.3.1 Edit README.md in Markdown Commit your first change by editing the README.md which is in markdown, simple syntax for conversion to HTML. Now update the contents of the README.md with the following, having a link and a numbered list: # nps-demo Wrangling data with R. ## Introduction This repository demonstrates **software** and _formats_: 1. **Git** 1. **Github** 1. _Markdown_ 1. _Rmarkdown_ ## Conclusion ![](https://octodex.github.com/images/labtocat.png) Now click on the Preview changes to see the markdown rendered as HTML: Notice the syntax for: numbered list gets automatically sequenced: 1., 1. headers get rendered at multiple levels: #, ## link: [](http://...) image: ![](http://...) italics: _word_ bold: **word** See Mastering Markdown · GitHub Guides and add some more personalized content to the README of your own, like a bulleted list or blockquote. 2.4 Create index.html By default index.html is served up. Go ahead and create a new file named index.html with the following basic HTML: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; &lt;h1&gt;My First Heading&lt;/h1&gt; &lt;p&gt;My first paragraph.&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; You’ll be prompted to clone this repository into a folder on your local machine. See GitHub Desktop User Guides for more. You could also do this from the Bash Shell for Git with the command git clone https://github.com/USER/REPO.git, replacing USER with your Github username and REPO with my_project. Or you can use the Github Desktop App menu File -&gt; Clone Repository… 2.5 Create RStudio Project with Git Repository Next, you will clone the repository onto your local machine using RStudio. I recommend creating it in a folder github under your user or Documents folder. Open RStudio and under the menu File -&gt; New Project… -&gt; Version Control -&gt; git and enter the URL with the .git extension (also available from the repository’s Clone button): If it all works correctly then you should see the files downloaded and showing up in the Files pane of RStudio. If RStudio is configured correctly to work with Git, then you should also see a Git pane. 2.6 Create index.Rmd in Rmarkdown Back in RStudio, let’s create a new Rmarkdown file, which allows us to weave markdown text with chunks of R code to be evaluated and output content like tables and plots. File -&gt; New File -&gt; Rmarkdown… -&gt; Document of output format HTML, OK. You can give it a Title of “My Project”. After you click OK, most importantly File -&gt; Save as index (which will get named with the filename extension index.Rmd). Some initial text is already provided for you. Let’s go ahead and “Knit HTML”. Notice how the markdown is rendered similar to as before + R code chunks are surrounded by 3 backticks and {r LABEL}. These are evaluated and return the output text in the case of summary(cars) and the output plot in the case of plot(pressure). Notice how the code plot(pressure) is not shown in the HTML output because of the R code chunk option echo=FALSE. Before we continue exploring Rmarkdown, visit the Git pane, check all modified (M) or untracked (?) files, click Commit, enter a message like “added index” and click the “Commit” button. Then Push (up green arrow) to push the locally committed changes on your lapto up to the Github repository online. This will update https://github.com/USER/nps-demo, and now you can also see your project website with a default index.html viewable at http://USER.github.io/nps-demo For more on Rmarkdown: rmarkdown cheatsheet.pdf rmarkdown.rstudio.com knitr in a knutshell - Karl Broman A more advanced topic worth mentioning is dealing merge conflicts 2.7 Exercise: Intertidal Sites Dataset Gil Rilov shared the following dataset for us to play with: Israel sites fall 2015-16.xlsx Please download and open this dataset. Your task is to investigate this dataset and prepare it for submission to OBIS. 2.7.1 Task: Provide Excel cell ranges for how you would divide data into tables? For reading and wrangling data in R, please see cheat sheets and resources mentioned in: Data Wrangling in the R Tidyverse - Google Slides "],
["manipulate-tidyr-dplyr.html", "3 Manipulate: tidyr, dplyr 3.1 install our first package: dplyr 3.2 Use dplyr::filter() to subset data row-wise. 3.3 Meet the new pipe operator 3.4 Use dplyr::select() to subset the data on variables or columns. 3.5 Revel in the convenience 3.6 Use mutate() to add new variables 3.7 group_by and summarize 3.8 Remember our for loop? 3.9 Summary 3.10 Further materials as reference…", " 3 Manipulate: tidyr, dplyr Data scientists, according to interviews and expert estimates, spend from 50 percent to 80 percent of their time mired in the mundane labor of collecting and preparing data, before it can be explored for useful information. - NYTimes (2014) Today we’re going to learn about a package by Hadley Wickham called dplyr and how it will help you with simple data exploration, and how you can use it in combination with the %&gt;% operator for more complex wrangling (including a lot of the things you would use for loops for. And we’re going to do this in Rmarkdown in the my-project repository we created this morning. Here are the steps: Open RStudio Make sure you’re in your my-project repo (and if not, get there) New &gt; Rmarkdown… (defaults are fine) Save as gapminder-dplyr.rmd Our workflow together will be to write some description of our analysis in Markdown for humans to read, and we will write all of our R code in the ‘chunks’. Get ready for the awesomeness, here we go… Today’s materials are again borrowing from some excellent sources, including Dr. Jenny Bryan’s lectures from STAT545 at UBC: Introduction to dplyr Software Carpentry’s R for reproducible scientific analysis materials: Dataframe manipulation with dplyr 3.1 install our first package: dplyr Packages are bundles of functions, along with help pages and other goodies that make them easier for others to use, (ie. vignettes). So far we’ve been using packages included in ‘base R’; they are ‘out-of-the-box’ functions. You can also install packages from online. The most traditional is CRAN, the Comprehensive R Archive Network. This is where you went to download R originally, and will go again to look for updates. You don’t need to go to CRAN’s website to install packages, we can do it from within R with the command install.packages(&quot;package-name-in-quotes&quot;). ## from CRAN: #install.packages(&quot;dplyr&quot;) ## do this once only to install the package on your computer. library(dplyr) ## do this every time you restart R and need it What’s the difference between install.packages() and library()? Here’s my analogy: install.packages() is setting up electricity for your house. Just need to do this once (let’s ignore monthly bills). library() is turning on the lights. You only turn them on when you need them, otherwise it wouldn’t be efficient. And when you quit R, and come back, you’ll have to turn them on again with library(), but you already have your electricity set up. 3.2 Use dplyr::filter() to subset data row-wise. First let’s read in the gapminder data. # install.packages(&#39;gapminder&#39;) # instead of reading in the csv library(gapminder) # this is the package name str(gapminder) # and it&#39;s also the data.frame name, just like yesterday ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 1704 obs. of 6 variables: ## $ country : Factor w/ 142 levels &quot;Afghanistan&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ continent: Factor w/ 5 levels &quot;Africa&quot;,&quot;Americas&quot;,..: 3 3 3 3 3 3 3 3 3 3 ... ## $ year : int 1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ... ## $ lifeExp : num 28.8 30.3 32 34 36.1 ... ## $ pop : int 8425333 9240934 10267083 11537966 13079460 14880372 12881816 13867957 16317921 22227415 ... ## $ gdpPercap: num 779 821 853 836 740 ... filter() takes logical expressions and returns the rows for which all are TRUE. Visually, we are doing this (thanks RStudio for your cheatsheet): filter(gapminder, lifeExp &lt; 29) filter(gapminder, country == &quot;Rwanda&quot;) filter(gapminder, country %in% c(&quot;Rwanda&quot;, &quot;Afghanistan&quot;)) Compare with some base R code to accomplish the same things gapminder[gapminder$lifeExp &lt; 29, ] ## repeat `gapminder`, [i, j] indexing is distracting subset(gapminder, country == &quot;Rwanda&quot;) ## almost same as filter ... but wait ... 3.3 Meet the new pipe operator Before we go any further, we should exploit the new pipe operator that dplyr imports from the magrittr package by Stefan Bache. This is going to change your data analytical life. You no longer need to enact multi-operation commands by nesting them inside each other. This new syntax leads to code that is much easier to write and to read. Here’s what it looks like: %&gt;%. The RStudio keyboard shortcut: Ctrl + Shift + M (Windows), Cmd + Shift + M (Mac). Let’s demo then I’ll explain: gapminder %&gt;% head This is equivalent to head(gapminder). This pipe operator takes the thing on the left-hand-side and pipes it into the function call on the right-hand-side – literally, drops it in as the first argument. Never fear, you can still specify other arguments to this function! To see the first 3 rows of Gapminder, we could say head(gapminder, 3) or this: gapminder %&gt;% head(3) I’ve advised you to think “gets” whenever you see the assignment operator, &lt;-. Similary, you should think “then” whenever you see the pipe operator, %&gt;%. You are probably not impressed yet, but the magic will soon happen. 3.4 Use dplyr::select() to subset the data on variables or columns. Back to dplyr … Use select() to subset the data on variables or columns. Visually, we are doing this (thanks RStudio for your cheatsheet): Here’s a conventional call: select(gapminder, year, lifeExp) But using what we just learned, with a pipe, we can do this: gapminder %&gt;% select(year, lifeExp) Let’s write it again but using multiple lines so it’s nicer to read. And let’s add a second pipe operator to pipe through head: gapminder %&gt;% select(year, lifeExp) %&gt;% head(4) ## # A tibble: 4 x 2 ## year lifeExp ## &lt;int&gt; &lt;dbl&gt; ## 1 1952 28.8 ## 2 1957 30.3 ## 3 1962 32.0 ## 4 1967 34.0 Think: “Take gapminder, then select the variables year and lifeExp, then show the first 4 rows.” 3.5 Revel in the convenience Let’s do a little analysis where we calculate the mean gdp for Cambodia. Here’s the gapminder data for Cambodia, but only certain variables: gapminder %&gt;% filter(country == &quot;Cambodia&quot;) %&gt;% # select(country, year, pop, gdpPercap) ## entering 4 of the 6 columns is tedious select(-continent, -lifeExp) # you can use - to deselect columns and what a typical base R call would look like: gapminder[gapminder$country == &quot;Cambodia&quot;, c(&quot;country&quot;, &quot;year&quot;, &quot;pop&quot;, &quot;gdpPercap&quot;)] ## # A tibble: 12 x 4 ## country year pop gdpPercap ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Cambodia 1952 4693836 368. ## 2 Cambodia 1957 5322536 434. ## 3 Cambodia 1962 6083619 497. ## 4 Cambodia 1967 6960067 523. ## 5 Cambodia 1972 7450606 422. ## 6 Cambodia 1977 6978607 525. ## 7 Cambodia 1982 7272485 624. ## 8 Cambodia 1987 8371791 684. ## 9 Cambodia 1992 10150094 682. ## 10 Cambodia 1997 11782962 734. ## 11 Cambodia 2002 12926707 896. ## 12 Cambodia 2007 14131858 1714. or, possibly?, a nicer look using base R’s subset() function: subset(gapminder, country == &quot;Cambodia&quot;, select = c(country, year, pop, gdpPercap)) ## # A tibble: 12 x 4 ## country year pop gdpPercap ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Cambodia 1952 4693836 368. ## 2 Cambodia 1957 5322536 434. ## 3 Cambodia 1962 6083619 497. ## 4 Cambodia 1967 6960067 523. ## 5 Cambodia 1972 7450606 422. ## 6 Cambodia 1977 6978607 525. ## 7 Cambodia 1982 7272485 624. ## 8 Cambodia 1987 8371791 684. ## 9 Cambodia 1992 10150094 682. ## 10 Cambodia 1997 11782962 734. ## 11 Cambodia 2002 12926707 896. ## 12 Cambodia 2007 14131858 1714. 3.6 Use mutate() to add new variables Imagine we wanted to recover each country’s GDP. After all, the Gapminder data has a variable for population and GDP per capita. Let’s add a new column and multiply them together. Visually, we are doing this (thanks RStudio for your cheatsheet): gapminder %&gt;% mutate(gdp = pop * gdpPercap) Exercise: how would you add that to the previous filter and select commands we did with Cambodia: gapminder %&gt;% filter(country == &quot;Cambodia&quot;) %&gt;% select(-continent, -lifeExp) Answer: gapminder %&gt;% filter(country == &quot;Cambodia&quot;) %&gt;% select(-continent, -lifeExp) %&gt;% mutate(gdp = pop * gdpPercap) 3.7 group_by and summarize Great! And now we want to calculate the mean gdp across all years (Let’s pretend that’s a good idea statistically) Visually, we are doing this (thanks RStudio for your cheatsheet): gapminder %&gt;% filter(country == &quot;Cambodia&quot;) %&gt;% select(-continent, -lifeExp) %&gt;% mutate(gdp = pop * gdpPercap) %&gt;% group_by(country) %&gt;% summarize(mean_gdp = mean(gdp)) %&gt;% ungroup() # if you use group_by, also use ungroup() to save heartache later 3.8 Remember our for loop? And how would you then do this for every country, not just Cambodia? Well, yesterday we would have been thinking about putting this whole analysis inside a for loop, replacing “Cambodia” with a new name each time we iterated through the loop. But today, we have it already, just need to delete one line from our analysis–we don’t need to filter out Cambodia anymore!! Visually, we are doing this (thanks RStudio for your cheatsheet): gapminder %&gt;% select(-continent, -lifeExp) %&gt;% mutate(gdp = pop * gdpPercap) %&gt;% group_by(country) %&gt;% summarize(mean_gdp = mean(gdp)) %&gt;% ungroup() # if you use group_by, also use ungroup() to save heartache later So we have done a pretty incredible amount of work in a few lines. Our whole analysis is this. Imagine the possibilities from here. library(dplyr) gapminder %&gt;% read.csv(&#39;data/gapminder-FiveYearData.csv&#39;) %&gt;% select(-continent, -lifeExp) %&gt;% mutate(gdp = pop * gdpPercap) %&gt;% group_by(country) %&gt;% summarize(mean_gdp = mean(gdp)) %&gt;% ungroup() # if you use group_by, also use ungroup() to save heartache later 3.9 Summary This has been the ‘Tranform’ or Wrangling part of this cycle. Importing and tidying is also a HUGE part of this process, and we don’t have time to get into it today. But look at the cheatsheet, and watch the webinar. cheatsheet and webinar. Watch this 1 hour webinar and follow along in RStudio and your science will be forever changed. Again! 3.10 Further materials as reference… 3.10.1 Rationale When performing data analysis in R, code can become quite messy, making it hard to revisit and determine the sequence of operations. Commenting helps. Good variable names help. Still, at least two common issues make code difficult to understand: multiple variables and nested functions. Let’s examine these issues by approaching an analysis presenting both problems, and finally see how dplyr offers an elegant alternative. For example, let’s ask of the surveys.csv dataset: How many observations of a certain thing you’re interested in appear each year? 3.10.2 Pseudocode You can write the logic out as pseudocode which can become later comments for the actual code: # read in csv # view data # limit columns to species and year # limit rows to just species &quot;NL&quot; # get count per year # write out csv 3.10.3 Summary The tidyr and dplyr packages were created by Hadley Wickham of ggplot2 fame. The “gg” in ggplot2 stands for the “grammar of graphics”. Hadley similarly considers the functionality of the two packages dplyr and tidyr to provide the “grammar of data manipulation”. Next, we’ll explore the data wrangling lessons that Remi contributed to Software Carpentry. 3.10.4 dplyr dplyr - Software Carpentry 3.10.5 tidyr tidyr - Software Carpentry 3.10.6 Other links Tidying up Data - Env Info - Rmd Data wrangling with dplyr and tidyr - Tyler Clavelle &amp; Dan Ovando - Rmd "],
["visualize-ggplot2-plotly-tmap.html", "4 Visualize: ggplot2, plotly, tmap 4.1 Plot 4.2 Map 4.3 References", " 4 Visualize: ggplot2, plotly, tmap 4.1 Plot Inspiring people: Hadley Wickham: grammar of graphics Hans Rosling: Gapminder Gapminder World - Wealth &amp; Health of Nations 4.1.1 Static: ggplot Creating publication quality graphics - Software Carpentry 4.1.1.1 Scatterplot library(dplyr) library(ggplot2) library(gapminder) # preview data gapminder # get range of available data summary(gapminder) # setup dataframe g = gapminder %&gt;% filter(year==2007) %&gt;% # most recent year mutate(pop_m = pop/1e6) # population, millions # plot scatterplot of most recent year s = ggplot(g, aes(x=gdpPercap, y=lifeExp)) + geom_point() s # add aesthetic of size by population s = s + aes(size=pop_m) s # add aesthetic of color by continent s = s + aes(color=continent) s # add title, update axes labels s = s + ggtitle(&#39;Health &amp; Wealth of Nations for 2007&#39;) + xlab(&#39;GDP per capita ($/year)&#39;) + ylab(&#39;Life expectancy (years)&#39;) s # label legend s = s + scale_colour_discrete(name=&#39;Continent&#39;) + scale_size_continuous(name=&#39;Population (M)&#39;) s Your Turn Now with country emissions datasets… CO2 Emissions from Fossil Fuels since 1751, By Nation - Dataset - Frictionless Open Data datasets/gdp 4.1.1.2 Boxplot # boxplot by continent b = ggplot(g, aes(x=continent, y=lifeExp)) + geom_boxplot() b # match color to continents, like scatterplot b = b + aes(fill=continent) b # drop legend, add title, update axes labels b = b + theme(legend.position=&#39;none&#39;) + ggtitle(&#39;Life Expectancy by Continent for 2007&#39;) + xlab(&#39;Continent&#39;) + ylab(&#39;Life expectancy (years)&#39;) b Your Turn: Make a similar plot but for gdpPercap. Be sure to update the plot’s aesthetic, axis label and title accordingly. 4.1.2 Interactive: plotly ggplot2 | plotly library(plotly) # install.packages(&#39;plotly&#39;) # scatterplot (Note: key=country shows up on rollover) s = ggplot(g, aes(x=gdpPercap, y=lifeExp, key=country)) + geom_point() ggplotly(s) # boxplot ggplotly(b) Your Turn: Expand the interactive scatterplot to include all the other bells and whistles of the previous plot in one continuous set of code (no in between setting of s). 4.1.3 Interactive: Exploding Boxplot library(explodingboxplotR) # devtools::install_github(&#39;timelyportfolio/explodingboxplotR&#39;) exploding_boxplot(g, y = &#39;lifeExp&#39;, group = &#39;continent&#39;, color = &#39;continent&#39;, label = &#39;country&#39;) 4.1.4 Interactive: Motion Plot The googleVis package ports most of the Google charts functionality. For every R chunk must set option results='asis', and once before any googleVis plots, set op &lt;- options(gvis.plot.tag='chart'). Rmarkdown and googleVis googleVis examples suppressPackageStartupMessages({ library(googleVis) # install.packages(&#39;googleVis&#39;) }) ## Creating a generic function for &#39;toJSON&#39; from package &#39;jsonlite&#39; in package &#39;googleVis&#39; op &lt;- options(gvis.plot.tag=&#39;chart&#39;) m = gvisMotionChart( gapminder %&gt;% mutate( pop_m = pop / 1e6, log_gdpPercap = log(gdpPercap)), idvar=&#39;country&#39;, timevar=&#39;year&#39;, xvar=&#39;log_gdpPercap&#39;, yvar=&#39;lifeExp&#39;, colorvar=&#39;continent&#39;, sizevar=&#39;pop_m&#39;) plot(m) Your Turn: Repeat the motion chart with the country having the highest gdpPercap filtered out. 4.2 Map Thematic maps tmap: tmap in a nutshell tmap modes: plot and interactive view 4.2.1 Static library(sf) library(tmap) # install.packages(&#39;tmap&#39;) # load world spatial polygons data(World) # inspect values in World World %&gt;% st_set_geometry(NULL) # gapminder countries not in World. skipping for now g %&gt;% anti_join(World, by=c(&#39;country&#39;=&#39;name&#39;)) %&gt;% arrange(desc(pop)) # World countries not in gapminder. skipping for now World %&gt;% anti_join(g, by=c(&#39;name&#39;=&#39;country&#39;)) %&gt;% arrange(desc(pop_est)) %&gt;% select(iso_a3, name, pop_est) # join gapminder data to World World = World %&gt;% left_join(g, by=c(&#39;name&#39;=&#39;country&#39;)) # make map m = tm_shape(World) + tm_polygons(&#39;lifeExp&#39;, palette=&#39;RdYlGn&#39;, id=&#39;name&#39;, title=&#39;Life expectancy (years)&#39;, auto.palette.mapping=F) + tm_style_gray() + tm_format_World() ## Warning: The argument auto.palette.mapping is deprecated. Please use ## midpoint for numeric data and stretch.palette for categorical data to ## control the palette mapping. ## Warning in tm_style_gray(): tm_style_gray is deprecated as of tmap version ## 2.0. Please use tm_style(&quot;gray&quot;, ...) instead ## Warning in tm_format_World(): tm_format_World is deprecated as of tmap ## version 2.0. Please use tm_format(&quot;World&quot;, ...) instead m 4.2.2 Interactive # show interactive map tmap_leaflet(m) 4.3 References ggplot2-cheatsheet-2.0.pdf Interactive Plots and Maps - Environmental Informatics Graphs with ggplot2 - Cookbook for R ggplot2 Essentials - STHDA NEON Working with Geospatial Data "]
]
